% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/entropy_measures.R
\name{entropy_measures}
\alias{entropy_measures}
\title{Title : Entropy based Measures (external measures)}
\usage{
entropy_measures(object, features = NULL, clusters = NULL)
}
\arguments{
\item{object}{: Clustering result from usual methods of clustering}

\item{features}{: True Partition (Classification) of the observation}

\item{clusters}{: Possibility to compute the matching Based measures from just clustering results}
}
\value{
Entropy Based Measures
}
\description{
Title : Entropy based Measures (external measures)
}
\examples{
:
# # # depencies :
# library(maxmatching)
# library(igraph)
# # # ------------------------------------------------------------------------------
# # # Data preparation
# # ------------------------------------------------------------------------------
# data("iris")
# head(iris)
# Remove species column (5) and scale the data
# iris.scaled <- scale(iris[, -5])
# true_class = iris[,5]
# methods from the package stats
# library(stats)
# (kmeans method)
# km.res <- kmeans(iris.scaled, 3, nstart = 10)
# entropy_measures(km.res, true_class)
# ------------------------------------------------------------------------------
# methods from the package cluster
# library(cluster)
# (pam method)
# pam.res = pam(iris.scaled, 3)
# matching_measures(pam.res, true_class)
# (clara method)
# clara.res = clara(iris.scaled, 3)
# matching_measures(clara.res, true_class)
# (fanny method)
# fanny.res = fanny(iris.scaled, 3)
# matching_measures(fanny.res, true_class)
# ------------------------------------------------------------------------------
# methods from the package fpc
# library(fpc)
# (dbscan method)
# dbscan.res = dbscan(iris.scaled, eps = 0.2)
# matching_measures(dbscan.res, true_class)
# dbscan method don't provide information, clusters are
# required for external measures computation
# ------------------------------------------------------------------------------
# methods from the package mclust
# library(mclust)
# Mclust method
# Mclust.res = Mclust(iris.scaled,4)
# matching_measures(Mclust.res, true_class)
# ------------------------------------------------------------------------------
# methods from the package FactoMineR
# library(FactoMineR)
# HCPC method
# HCPC.res = HCPC(data.frame(iris.scaled),3)
# matching_measures(HCPC.res,true_class)
# ------------------------------------------------------------------------------
# methods from the package factoextra
# library(factoextra)
# hkmeans method
# hkmeans.res = hkmeans(iris.scaled,3)
# matching_measures(hkmeans.res,true_class)
# ------------------------------------------------------------------------------
# using the two arguments of the function : features, clusters
# matching_measures(object = NULL,features = true_class, clusters=HCPC.res$call$X$clust)
}
\author{
Mohamed Al Mahdi Tantaoui
}
